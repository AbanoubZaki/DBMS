package eg.edu.alexu.csd.oop.db.cs01.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import eg.edu.alexu.csd.oop.db.Database;
import eg.edu.alexu.csd.oop.db.cs01.OurSql;
import eg.edu.alexu.csd.oop.db.cs01.modules.Table;

public class OurStatement implements Statement {

	private boolean isClosed;
	private ArrayList<String> batches;
	private Connection connection;
	private ResultSet resultSet;
	private Database db;
	private int updateCount;
	private int timeLimit;
	private String path;
	private Statement s;

	public OurStatement(Connection connection, String path) {
		this.isClosed = false;
		this.batches = new ArrayList<String>();
		this.connection = connection;
		this.db = OurSql.getInstance();
		this.updateCount = -1;
		this.timeLimit = 0;
		this.path = path;
		s = this;
	}

	private void exceptionIfColsed() throws SQLException {
		if (isClosed) {
			OurLogger.warn(this.getClass(), "This statement is already closed");
			throw new SQLException("This statement is already closed");
		}
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		exceptionIfColsed();
		batches.add(sql);
	}

	@Override
	public void cancel() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void clearBatch() throws SQLException {
		exceptionIfColsed();
		this.batches = new ArrayList<String>();
	}

	@Override
	public void clearWarnings() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void close() throws SQLException {
		// TODO Auto-generated method stub
		if (isClosed)
			return;
		this.connection = null;
		clearBatch();
		this.isClosed = true;
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		exceptionIfColsed();
		ExecutorService executor = Executors.newSingleThreadExecutor();
		Future<Boolean> future = executor.submit(new Query(sql));
		try {
			return this.getQueryTimeout() == 0 ? future.get() : future.get(this.timeLimit, TimeUnit.SECONDS);
		} catch (SQLException | InterruptedException | ExecutionException | TimeoutException e) {
			future.cancel(true);
			throw new SQLException(e.getCause().getLocalizedMessage());
		} finally {
			executor.shutdownNow();
		}

	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		exceptionIfColsed();
		int[] updates = new int[batches.size()];

		for (int i = 0; i < batches.size(); i++) {

			try {
				if (this.execute(batches.get(i))) {
					if (this.getUpdateCount() != -1) {
						updates[i] = this.getUpdateCount();
					} else {
						updates[i] = SUCCESS_NO_INFO;
					}
				} else {
					updates[i] = EXECUTE_FAILED;
				}
			} catch (SQLException e) {
				updates[i] = EXECUTE_FAILED;
			}
		}
		return updates;

	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		exceptionIfColsed();
		this.execute(sql);
		return resultSet;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		exceptionIfColsed();
		this.execute(sql);
		return getUpdateCount() != -1 ? getUpdateCount() : 0;
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public Connection getConnection() throws SQLException {
		// TODO Auto-generated method stub
		exceptionIfColsed();
		return connection;
	}

	@Override
	public int getFetchDirection() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getFetchSize() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getMaxRows() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		exceptionIfColsed();
		return this.timeLimit;
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return resultSet;
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getResultSetType() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public int getUpdateCount() throws SQLException {

		return updateCount;
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return isClosed;
	}

	@Override
	public boolean isPoolable() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		exceptionIfColsed();
		this.timeLimit = seconds;
	}

	// class Query to make execute function is able to cancel
	private class Query implements Callable<Boolean> {
		private String sql;

		public Query(String sql) {
			this.sql = sql;
		}

		@Override
		public Boolean call() throws SQLException {

			if (sql.toLowerCase().contains("select ")) {
				Object[][] selectedData = db.executeQuery(sql);
				resultSet = new OurResultSet(Table.getInstance(), new OurResultSetMetaData(Table.getInstance()), s);
				updateCount = -1;
				return selectedData != null && selectedData.length != 0;
			} else if (sql.toLowerCase().contains("create ") || sql.toLowerCase().contains("drop ")) {
				if (sql.toLowerCase().contains("database ")) {
					// mesh 3rf hgyb el path mnen !!
					int index = sql.toLowerCase().lastIndexOf("database ");
					sql = sql.substring(0, index + 9) + path + System.getProperty("file.separator")
							+ sql.substring(index + 9);
				}
				updateCount = -1;
				return db.executeStructureQuery(sql);
			} else {
				updateCount = db.executeUpdateQuery(sql);
				return true;
			}
		}
	}

}
